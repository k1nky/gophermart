// Code generated by MockGen. DO NOT EDIT.
// Source: http.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	order "github.com/k1nky/gophermart/internal/entity/order"
	user "github.com/k1nky/gophermart/internal/entity/user"
)

// MockauthService is a mock of authService interface.
type MockauthService struct {
	ctrl     *gomock.Controller
	recorder *MockauthServiceMockRecorder
}

// MockauthServiceMockRecorder is the mock recorder for MockauthService.
type MockauthServiceMockRecorder struct {
	mock *MockauthService
}

// NewMockauthService creates a new mock instance.
func NewMockauthService(ctrl *gomock.Controller) *MockauthService {
	mock := &MockauthService{ctrl: ctrl}
	mock.recorder = &MockauthServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockauthService) EXPECT() *MockauthServiceMockRecorder {
	return m.recorder
}

// Authorize mocks base method.
func (m *MockauthService) Authorize(token string) (user.PrivateClaims, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Authorize", token)
	ret0, _ := ret[0].(user.PrivateClaims)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Authorize indicates an expected call of Authorize.
func (mr *MockauthServiceMockRecorder) Authorize(token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Authorize", reflect.TypeOf((*MockauthService)(nil).Authorize), token)
}

// Login mocks base method.
func (m *MockauthService) Login(ctx context.Context, u user.User) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", ctx, u)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login.
func (mr *MockauthServiceMockRecorder) Login(ctx, u interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockauthService)(nil).Login), ctx, u)
}

// Register mocks base method.
func (m *MockauthService) Register(ctx context.Context, u user.User) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", ctx, u)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Register indicates an expected call of Register.
func (mr *MockauthServiceMockRecorder) Register(ctx, u interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockauthService)(nil).Register), ctx, u)
}

// MockaccountService is a mock of accountService interface.
type MockaccountService struct {
	ctrl     *gomock.Controller
	recorder *MockaccountServiceMockRecorder
}

// MockaccountServiceMockRecorder is the mock recorder for MockaccountService.
type MockaccountServiceMockRecorder struct {
	mock *MockaccountService
}

// NewMockaccountService creates a new mock instance.
func NewMockaccountService(ctrl *gomock.Controller) *MockaccountService {
	mock := &MockaccountService{ctrl: ctrl}
	mock.recorder = &MockaccountServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockaccountService) EXPECT() *MockaccountServiceMockRecorder {
	return m.recorder
}

// IsDuplicateOrder mocks base method.
func (m *MockaccountService) IsDuplicateOrder(err error) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsDuplicateOrder", err)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsDuplicateOrder indicates an expected call of IsDuplicateOrder.
func (mr *MockaccountServiceMockRecorder) IsDuplicateOrder(err interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsDuplicateOrder", reflect.TypeOf((*MockaccountService)(nil).IsDuplicateOrder), err)
}

// NewOrder mocks base method.
func (m *MockaccountService) NewOrder(ctx context.Context, u user.User, o order.Order) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewOrder", ctx, u, o)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewOrder indicates an expected call of NewOrder.
func (mr *MockaccountServiceMockRecorder) NewOrder(ctx, u, o interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewOrder", reflect.TypeOf((*MockaccountService)(nil).NewOrder), ctx, u, o)
}
