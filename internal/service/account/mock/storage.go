// Code generated by MockGen. DO NOT EDIT.
// Source: account.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	user "os/user"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	order "github.com/k1nky/gophermart/internal/entity/order"
)

// MockStorage is a mock of Storage interface.
type MockStorage struct {
	ctrl     *gomock.Controller
	recorder *MockStorageMockRecorder
}

// MockStorageMockRecorder is the mock recorder for MockStorage.
type MockStorageMockRecorder struct {
	mock *MockStorage
}

// NewMockStorage creates a new mock instance.
func NewMockStorage(ctrl *gomock.Controller) *MockStorage {
	mock := &MockStorage{ctrl: ctrl}
	mock.recorder = &MockStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorage) EXPECT() *MockStorageMockRecorder {
	return m.recorder
}

// IsUniqueViolation mocks base method.
func (m *MockStorage) IsUniqueViolation(err error) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsUniqueViolation", err)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsUniqueViolation indicates an expected call of IsUniqueViolation.
func (mr *MockStorageMockRecorder) IsUniqueViolation(err interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsUniqueViolation", reflect.TypeOf((*MockStorage)(nil).IsUniqueViolation), err)
}

// NewOrder mocks base method.
func (m *MockStorage) NewOrder(ctx context.Context, u user.User, o order.Order) (*order.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewOrder", ctx, u, o)
	ret0, _ := ret[0].(*order.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewOrder indicates an expected call of NewOrder.
func (mr *MockStorageMockRecorder) NewOrder(ctx, u, o interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewOrder", reflect.TypeOf((*MockStorage)(nil).NewOrder), ctx, u, o)
}
