// Code generated by MockGen. DO NOT EDIT.
// Source: contract.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	order "github.com/k1nky/gophermart/internal/entity/order"
	user "github.com/k1nky/gophermart/internal/entity/user"
	withdraw "github.com/k1nky/gophermart/internal/entity/withdraw"
)

// Mockstorage is a mock of storage interface.
type Mockstorage struct {
	ctrl     *gomock.Controller
	recorder *MockstorageMockRecorder
}

// MockstorageMockRecorder is the mock recorder for Mockstorage.
type MockstorageMockRecorder struct {
	mock *Mockstorage
}

// NewMockstorage creates a new mock instance.
func NewMockstorage(ctrl *gomock.Controller) *Mockstorage {
	mock := &Mockstorage{ctrl: ctrl}
	mock.recorder = &MockstorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockstorage) EXPECT() *MockstorageMockRecorder {
	return m.recorder
}

// GetBalanceByUser mocks base method.
func (m *Mockstorage) GetBalanceByUser(ctx context.Context, userID user.ID) (user.Balance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBalanceByUser", ctx, userID)
	ret0, _ := ret[0].(user.Balance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBalanceByUser indicates an expected call of GetBalanceByUser.
func (mr *MockstorageMockRecorder) GetBalanceByUser(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBalanceByUser", reflect.TypeOf((*Mockstorage)(nil).GetBalanceByUser), ctx, userID)
}

// GetOrderByNumber mocks base method.
func (m *Mockstorage) GetOrderByNumber(ctx context.Context, number order.OrderNumber) (*order.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrderByNumber", ctx, number)
	ret0, _ := ret[0].(*order.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrderByNumber indicates an expected call of GetOrderByNumber.
func (mr *MockstorageMockRecorder) GetOrderByNumber(ctx, number interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderByNumber", reflect.TypeOf((*Mockstorage)(nil).GetOrderByNumber), ctx, number)
}

// GetOrdersByUserID mocks base method.
func (m *Mockstorage) GetOrdersByUserID(ctx context.Context, userID user.ID) ([]*order.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrdersByUserID", ctx, userID)
	ret0, _ := ret[0].([]*order.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrdersByUserID indicates an expected call of GetOrdersByUserID.
func (mr *MockstorageMockRecorder) GetOrdersByUserID(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrdersByUserID", reflect.TypeOf((*Mockstorage)(nil).GetOrdersByUserID), ctx, userID)
}

// GetWithdrawalsByUserID mocks base method.
func (m *Mockstorage) GetWithdrawalsByUserID(ctx context.Context, userID user.ID) ([]*withdraw.Withdraw, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWithdrawalsByUserID", ctx, userID)
	ret0, _ := ret[0].([]*withdraw.Withdraw)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWithdrawalsByUserID indicates an expected call of GetWithdrawalsByUserID.
func (mr *MockstorageMockRecorder) GetWithdrawalsByUserID(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWithdrawalsByUserID", reflect.TypeOf((*Mockstorage)(nil).GetWithdrawalsByUserID), ctx, userID)
}

// NewOrder mocks base method.
func (m *Mockstorage) NewOrder(ctx context.Context, newOrder order.Order) (*order.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewOrder", ctx, newOrder)
	ret0, _ := ret[0].(*order.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewOrder indicates an expected call of NewOrder.
func (mr *MockstorageMockRecorder) NewOrder(ctx, newOrder interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewOrder", reflect.TypeOf((*Mockstorage)(nil).NewOrder), ctx, newOrder)
}

// NewWithdraw mocks base method.
func (m *Mockstorage) NewWithdraw(ctx context.Context, w withdraw.Withdraw) (*withdraw.Withdraw, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewWithdraw", ctx, w)
	ret0, _ := ret[0].(*withdraw.Withdraw)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewWithdraw indicates an expected call of NewWithdraw.
func (mr *MockstorageMockRecorder) NewWithdraw(ctx, w interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewWithdraw", reflect.TypeOf((*Mockstorage)(nil).NewWithdraw), ctx, w)
}
